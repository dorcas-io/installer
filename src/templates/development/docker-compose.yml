version: "3.9"

services:
  business_proxy_development:
    container_name: "${SERVICE_PROXY_NAME}"
    image: ${SERVICE_PROXY_IMAGE}
    ports:
      - "${SERVICE_PROXY_PORT}:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - dorcas

  business_core_php_development:
    container_name: "${SERVICE_CORE_PHP_NAME}"
    build:
      context: "src"
      dockerfile: "app/Dockerfile.core"
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: "${SERVICE_CORE_PHP_NAME}"
      SERVICE_TAGS: dev
    working_dir: "${SERVICE_CORE_PHP_WORKING_DIR}"
    env_file: "${SERVICE_CORE_PHP_ENV_FILE}"
    volumes:
      #- "${SERVICE_CORE_PHP_VOLUMES_ENV}"
      - "${SERVICE_CORE_PHP_VOLUMES_PHP_INI}"
      - "${SERVICE_CORE_PHP_SRC_DIR}:${SERVICE_CORE_PHP_WORKING_DIR}"
      #- "${SERVICE_CORE_PHP_APP_DIR}/composer.json.core:${SERVICE_CORE_PHP_WORKING_DIR}/composer.json"
      #- "${SERVICE_CORE_PHP_APP_DIR}/commands_core.sh:${SERVICE_CORE_PHP_WORKING_DIR}/commands_core.sh"
      #- ${PWD}/web/cors_settings.conf:/etc/nginx/cors_settings.conf
      #- type: bind
      #  source: ${SERVICE_CORE_PHP_APP_DIR}/commands_core.sh
      #  target: ${SERVICE_CORE_PHP_WORKING_DIR}/commands_core.sh
    #command: ./commands_core.sh
    depends_on:
      - business_mysql_development
      - business_redis_development
      - business_smtp_development
    networks:
      - dorcas

  business_core_web_development:
    container_name: "${SERVICE_CORE_WEB_NAME}"
    build:
      context: ./nginx/core
    restart: unless-stopped
    tty: true
    ports:
      - "${SERVICE_CORE_WEB_PORT}:80"
    #volumes:
    #  - "${PWD}/src/core/public:${SERVICE_CORE_PHP_WORKING_DIR}/public"
    depends_on:
      - business_core_php_development
    networks:
      - dorcas
    environment:
      - VIRTUAL_HOST=${SERVICE_CORE_WEB_SUBDOMAIN}.${HOST_DOMAIN}
      - SERVICE_CORE_PHP_NAME=${SERVICE_CORE_PHP_NAME}

  business_hub_php_development:
    container_name: "${SERVICE_HUB_PHP_NAME}"
    build:
      context: "${SERVICE_HUB_PHP_APP_DIR}"
      dockerfile: "Dockerfile.hub"
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: "${SERVICE_HUB_PHP_NAME}"
      SERVICE_TAGS: production
    working_dir: "${SERVICE_HUB_PHP_WORKING_DIR}"
    env_file: "${SERVICE_HUB_PHP_ENV_FILE}"
    volumes:
      - "${SERVICE_HUB_PHP_VOLUMES_ENV}"
      - "${SERVICE_HUB_PHP_VOLUMES_PHP_INI}"
    #  - "${SERVICE_HUB_PHP_SRC_DIR}:${SERVICE_HUB_PHP_WORKING_DIR}"
    #- "${SERVICE_HUB_PHP_APP_DIR}/composer.json.hub:${SERVICE_HUB_PHP_WORKING_DIR}/composer.json"
    #- "${SERVICE_HUB_PHP_APP_DIR}/commands_hub.sh:${SERVICE_HUB_PHP_WORKING_DIR}/commands_hub.sh"
    #- ${PWD}/web/cors_settings.conf:/etc/nginx/cors_settings.conf
    #command: ./commands_hub.sh
    depends_on:
      - business_mysql_development
      - business_redis_development
      - business_smtp_development
    # command: "php artisan storage:link"
    networks:
      - dorcas

  business_hub_web_development:
    container_name: "${SERVICE_HUB_WEB_NAME}"
    build:
      context: ./nginx/hub
    restart: unless-stopped
    tty: true
    ports:
      - "${SERVICE_HUB_WEB_PORT}:80"
    #volumes:
    #  - "${PWD}/src/hub/public:${SERVICE_HUB_PHP_WORKING_DIR}/public"
    depends_on:
      - business_hub_php_development
      - business_core_web_development
    networks:
      - dorcas
    environment:
      - VIRTUAL_HOST=${HOST_DOMAIN},store.${HOST_DOMAIN},blog.${HOST_DOMAIN}
      - SERVICE_HUB_PHP_NAME=${SERVICE_HUB_PHP_NAME}

  business_mysql_development:
    container_name: "${SERVICE_MYSQL_NAME}"
    build:
      context: ./mysql/
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    # tty: true
    ports:
      - "${SERVICE_MYSQL_PORT}:3306"
    volumes:
      - dorcas_business_databases_development:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${SERVICE_MYSQL_PASSWORD}
      - VIRTUAL_HOST=mysql.${HOST_DOMAIN}
      - SERVICE_NAME=business_mysql
    networks:
      - dorcas

  business_redis_development:
    container_name: "${SERVICE_REDIS_NAME}"
    image: "${SERVICE_REDIS_IMAGE}"
    restart: unless-stopped
    tty: true
    ports:
      - "${SERVICE_REDIS_PORT}:6379"
    volumes:
      - dorcas_business_redis_development:/data
    networks:
      - dorcas
    environment:
      - VIRTUAL_HOST=redis.${HOST_DOMAIN}

  business_smtp_development:
    container_name: "${SERVICE_SMTP_NAME}"
    image: "${SERVICE_SMTP_IMAGE}"
    restart: unless-stopped
    tty: true
    ports:
      - "${SERVICE_SMTP_PORT}:1025"
      - "${SERVICE_SMTP_PORT_2}:8025"
    networks:
      - dorcas
    environment:
      - VIRTUAL_HOST=smtp.${HOST_DOMAIN}

volumes:
  dorcas_business_databases_development:
    driver: local
  dorcas_business_redis_development:
    driver: local

networks:
  dorcas:
    driver: bridge
